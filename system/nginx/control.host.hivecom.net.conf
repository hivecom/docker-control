# Docker Control API proxy configuration
upstream docker_control {
    server 127.0.0.1:54320;
    keepalive 64;
}

# HTTP to HTTPS redirect
server {
    # Listen on port 80 (HTTP) via IPv4 and IPv6.
    listen 80;
    listen [::]:80;

    # Set domain names to listen under for this directive.
    server_name control.host.hivecom.net;

    # Redirect to the same address but as an HTTPS connection.
    return 301 https://$server_name$request_uri;
}

# Docker Control API server configuration
server {
    # Listen on port 443 (HTTPS) via IPv4 and IPv6.
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;

    # Include SSL configuration - you'll need to adapt these to your SSL setup
    include snippets/ssl-hivecom.net.conf;
    include snippets/ssl-params.conf;

    # Include Security Headers if you have them
    include snippets/security-headers.conf;

    # Set server name
    server_name control.host.hivecom.net;

    # Configure logs - adjust paths as needed for your environment
    access_log /var/log/nginx/control.host.hivecom.net_access.log;
    error_log /var/log/nginx/control.host.hivecom.net_error.log;

    # Pass any errors and access to the default nginx logs
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    location / {
        # Pass headers about the connecting client and address
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Send further connection data to our proxy configuration
        proxy_pass http://docker_control;
        proxy_http_version 1.1;
        proxy_pass_request_headers on;
        proxy_set_header Connection "keep-alive";
        proxy_store off;
    }
}
